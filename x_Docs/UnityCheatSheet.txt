Make Solutions Compatible with OmniSharp Atom
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Remove the following section from the end of the .sln file.

	GlobalSection(SolutionProperties) = preSolution
	    HideSolutionNode = FALSE
	EndGlobalSection

And be sure to remove the extra line at the end before EndGlobal.



Timer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// change false to true if you want this to be a repeating timer

StartCoroutine(Timer.Start(timeBeforeLevelReload, false, () =>
{
	Application.LoadLevel("Level" + newLevel);
	System.GC.Collect();
}));



Message System
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Broadcast message to ALL GameObjects
EventKit.Broadcast<bool>("player above ground", true);

// Send message to every MonoBehaviour in this GameObject
gameObject.SendMessage("ApplyDamage", 5.0F);

// Send message to every MonoBehaviour in this GameObject, and all its children
gameObject.BroadcastMessage("ApplyDamage", 5.0F);

// Send message to every MonoBehaviour in this GameObject, and all its ancestors
gameObject.SendMessageUpwards("ApplyDamage", 5.0F);



// Accessing a Component's own variables and methods
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public class MyClass : BaseBehaviour {

	string myString = "This is my string";

	Debug.Log(myString + " accessed the normal way.");
	Debug.Log(this.myString + "  using the this. keyword.");
	Debug.Log(GetComponent<MyClass>().myString + " using GetComponent.")

	// Or just accessing the Class.
	Debug.Log(this);
	Debug.Log(GetComponent<MyClass>());
}



// Accessing another Component on the current GameObject
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public class MyClass : BaseBehaviour {

	TalkToMe otherComponent;

	void Start()
	{
		otherComponent = GetComponent<TalkToMe>();
	}

	void Update()
	{
		Debug.Log("This is the TalkToMe Component: " + otherComponent);
		Debug.Log ("This is the usual way to get a variable: " + otherComponent.hereItIs);
		Debug.Log ("This is another way. Not great to use in Update(): " + GetComponent<TalkToMe>().hereItIs);
		// This calls another Component's Method.
		otherComponent.MakeMeTalk();
	}

}

public class TalkToMe : BaseBehaviour {

	public string hereItIs = "This is the TalkToMe variable.";

	public void MakeMeTalk()
	{
		Debug.Log ("This is the TalkToMe Method.");
	}
}



// Accessing Components on a Parent GameObject
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public class MyClass : BaseBehaviour {

	private PlayerState state;

	void Start()
	{
		state = transform.parent.GetComponent<PlayerState>();
	}

	void Update()
	{
		state.Dead = false;
	}
}



// Accessing other GameObjects and their Components
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public class MyClass : BaseBehaviour {

	GameObject spaceShip;
	ShipControl shipControl;

	void Start()
	{
		spaceShip = GameObject.Find("Millenium Falcon");
		shipControl = GameObject.Find("Millenium Falcon").GetComponent<ShipControl>();
	}

	void Update()
	{
		spaceShip.GetComponent<ShipControl>().SpinRight();
		spaceShip.GetComponent<ShipControl>().SpinLeft();

		shipControl.SpinRight();
		shipControl.SpinLeft();

		Debug.Log("At the helm of the Millenium Falcon is: " + shipControl.atHelm);
	}
}

public class ShipControl : BaseBehaviour {  // Attached to a GameObject called Millenium Falcon

	public string atHelm = "Han Solo."

	public void SpinRight()
	{
		transform.Rotate (0,0,-60 * Time.deltaTime);
	}

	public void SpinLeft()
	{
		transform.Rotate (0,0,60 * Time.deltaTime);
	}

}



// Decision Making with If Statements
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (temp < 72 && isWindy)
{
	caryIsCold = true;
}

else if (temp > 75 || isSummer)
{
	caryIsCold = false;
}



// Decision Making with Conditional Operator
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public class MyClass : BaseBehaviour {

	string classify;

	classify = (input > 0) ? "positive" : "negative";

}



// Decision Making with Switch
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
int caseSwitch = 1;

switch (caseSwitch)
{
case 1:
case 2:
	Debug.Log("Case 1 or Case 2");
	break;
case 3:
case 4:
	Debug.Log("Case 3 or Case 4");
	break;
case 5:
	Debug.Log("Case 5");
	break;
default:
	Debug.Log("Default case");
	break;
}



// Decision Making from User Input
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (Input.GetKeyDown(KeyCode.UpArrow))
{
	JumpCharacter();
}



// Arrays
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public class MyClass : BaseBehaviour {

	public string[] weapons = new string[3];

	void GetWeapons()
	{
		weapons[0] = "Broad Sword";
		weapons[1] = "Axe";
		weapons[2] = "Crossbow";

		Debug.Log("My favorite weapon is the " + weapons[2]);
		Debug.Log("There are " + weapons.Length + " weapons in this array.";)
	}

// Collection Initializers
public string[] weapons = new string[]
	{"Broad Sword", "Axe", "Crossbow"};
}



// Lists
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using System.Collections.Generic  //Required for Lists

public class MyClass : BaseBehaviour {

	List<string> myFavoriteGuitars = new List<string>();
	myFavoriteGuitars.Add("Martin D-18");
	myFavoriteGuitars.Add("Gibson SG Classic");

	Debug.Log("The guitar at location 0 is: " + myFavoriteGuitars[0]);
	Debug.Log("This list now contains " + myFavoriteGuitars.Count + " guitars.");

	// Collection Initializers
	List<string> myFavoriteGuitars = new List<string>()
		{"Martin D-18", "Gibson SG Classic" };

}



// Dictionaries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using System.Collections.Generic  //Required for Dictionaries

public class MyClass : BaseBehaviour {

	Dictionary<int, string> myFavoriteAmps = new Dictionary<int, string>();
	myFavoriteAmps.Add(10, "Fender Twin");
	myFavoriteAmps[20] = "Vox AC-30";

	Debug.Log("The Amp at index 10 is " + myFavoriteAmps[10]);
	Debug.Log("This dictionary has " + myFavoriteAmps.Count + " amplifiers.");

	// with Collection Initializers
	Dictionary<int, string> myFavoriteAmps = new Dictionary<int, string>()
		{ {10, "Fender Twin"}, {20, "Vox AC-30"} };
}



// ForEach Loops for Traversing Arrays, Lists, and Dictionaries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using System.Collections.Generic  //Required for Dictionaries

public class MyClass : BaseBehaviour {

	void Start()
	{
		// ForEach with Arrays
		string[] guitarArray = new string[]
			{"Gibson", "Martin"};

		foreach(string guitar in guitarArray)
		{
			if(guitar == "Martin")
				Debug.Log("I was looking for a " + guitar);
		}

		//ForEach with Lists
		List<string> guitarList = new List<string>()
			{"Gibson", "Martin"};

		foreach(string guitar in guitarList)
		{
			if(guitar == "Martin")
				Debug.Log("I was looking for a " + guitar);
		}

		//ForEach with Dictionaries
		Dictionary<int, string>  guitarDictionary = new Dictionary<int, string>()
			{{10, "Gibson"}, {20, "Martin"}};

		foreach(KeyValuePair<int, string> guitar in guitarDictionary)
			if(guitar.Key == 20)
				Debug.Log("I was looking for a " + guitar.Value);
	}
}



// For Loops for Traversing Arrays, Lists, and Dictionaries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using System.Collections.Generic  //Required for Dictionaries

public class MyClass : BaseBehaviour {
	void Start()
	{
		List<string> guitarList = new List<string>()
			{"Gibson", "Martin"};

		Debug.Log("Number of guitars in guitarList: " + guitarList.Count);

		for(int i = 0; i < guitarList.Count; i++)
		{
			Debug.Log(guitarList[i]);

			if(guitarList[i] == "Martin")
				Debug.Log("I was looking for a " + guitarList[i]);
		}
	}
}



// While Loops for Traversing Arrays, Lists, and Dictionaries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using System.Collections.Generic  //Required for Dictionaries

public class MyClass : BaseBehaviour {
	void Start()
	{
		List<string> guitarList = new List<string>()
		{"Gibson", "Martin", "Taylor"};

		int i = 0;
		while(i < guitarList.Count)
		{
			Debug.Log(guitarList[i]);

			if(guitarList[i] == "Martin")
			{
				Debug.Log("I was looking for a " + guitarList[i]);
				break;
			}
			i++;
		}
	}
}



// Perform an action after a certain amount of time, using Invoke()
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void Update()
{
	Invoke("HelloWorld", 1);   //Invokes method Hello World, after one second
}

void HelloWorld()
{
	Debug.log("Hello World!");
}



// Tweening with DOTween
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using DG.Tweening;

SpriteRenderer spriteRenderer;

void Start()
{
	spriteRenderer = GetComponent<SpriteRenderer>();
}

void Update()
{
	// Kill current Tweens on SpriteRenderer
	spriteRenderer.DOKill();

	// Run a single Tween
	rigidbody2D.DORotate(360, 1).SetRelative();

	// Run a sequence of Tweens
	DOTween.Sequence()
		.Append(spriteRenderer.DOFade(0, 1))
		.AppendInterval(0.1f)
		.Append(spriteRenderer.DOFade(1, 0));
}



// Destroy object after interval
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Object.Destroy(gameObject, 2.0f);

Destroy(prize, prize.audio.clip.length);



// Add Tool-Tip to a public variable
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Tooltip("This is a great tooltip")]
public int someVariable = 5;



// Creating a Namespace
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using UnityEngine;
using System.Collections;

namespace MyNamespace
{
    public class SomeClass : BaseBehaviour
    {
        void Start ()
        {

        }
    }
}
